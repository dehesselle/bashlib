################################################################################
#                                                                              #
#   bl_dep:  bash library, dependency management functions                     #
#                                                                              #
#                                                                              #
#                                                                              #
#   https://github.com/dehesselle/bashlib                                      *
#                                                                              #
################################################################################

[ -z $BL_DEP_INCLUDED ] && BL_DEP_INCLUDED=true || return

### INCLUDES ###################################################################

# No dependencies allowed!
#
# This file is included by all the other bashlib files so we can exit in
# a controlled manner if the most basic requirements (i.e. bash) aren't
# met.

### VARIABLES ##################################################################

BL_DEP_VERSION_FILE=$BL_SRC/../version.nfo
BL_DEP_VERSION=unknown   # will be set in 'RUN' section

[ -z $BL_DEP_VERSION_REQUIRED ] && BL_DEP_VERSION_REQUIRED=unknown

### FUNCTIONS ##################################################################

# Since we're going to check for the presence of bash (see 'RUN' below) we need
# to keep the function definitions posix-style here. The function body is not
# required to be posix for e.g. 'sh' not to throw errors when reading this file.

bl_dep_check_pgm()
{
   # Check if a required program can be found (through '$PATH') and is 
   # executable. You can also supply a test command and an expected result,
   # e.g. to check for a specific version of said program.
   # If the given program is not found, exit with rc 1.

   local program=$1
   local test_command=$2   # optional: test command to be executed
   local test_result=$3    # a bash-style regex describing the expected result
   local test_hint=$4      # will be echo'ed if the above test fails

   if [[ "$program" =~ .*/.* ]]; then   # contains forward slash?
      if [ -x "$program" ]; then   # program found and executable?
         local rc=0
      else
         local rc=1
      fi
   else
      which $program 1>/dev/null 2>&1   # look for program in path
      local rc=$?
   fi

   case $rc in
      0)
         if [ ${#test_command} -gt 0 ]; then
            if [[ "$($test_command 2>/dev/null)" =~ $test_result ]]; then
               :    # ok!
            else
               echo "[bl_dep_check] compatibility check failed: $program"
               [ ${#test_hint} -gt 0 ] && echo "[bl_dep_check] hint: $test_hint"
               exit 1
            fi
         fi
         ;;
      1)
         echo "[bl_dep_check] unresolved dependency or not in path: $program"
         exit 1
         ;;
      2)
         echo "[bl_dep_check] syntax error"
         exit 1
         ;;
      127) # 'which' couldn't be run
         echo "[bl_dep_check] couldn't run 'which'"
         exit 1
         ;;
      *)
         echo "[bl_dep_check] unknown error: $rc"
         exit 1
         ;;
   esac
}

bl_dep_check_func()
{
   # Check if a function with the given name already exists.

   declare -F $1 &>/dev/null && echo true || echo false
}

bl_dep_check_version()
{
   local supported_versions=$1

   local this_version=${BL_DEP_VERSION%%-*}   # cut off git commit info
   local dot_count=${this_version//[^\\.]}
         dot_count=${#dot_count}

   if [ $dot_count -gt 1 ]; then
      this_version=${this_version%.*}   # cut off minor version number
   fi

   local found=false

   for version in ${supported_versions//,/ }; do
      if [ "$version" = "$this_version" ]; then
         found=true
         break
      fi
   done

   if $found; then
      return 0
   fi

   return 1
}

### RUN ########################################################################

if   [ -z $BASH ]; then
   echo "[bl_dep] This scripts needs 'bash' to run."
   exit 1
elif [ ! -z $POSIXLY_CORRECT ]; then
   # POSIXLY_CORRECT can happen if bash executes scripts that have
   # the '#!/bin/sh' shebang, e.g. on system where bash is the only available
   # shell
   echo "[bl_dep] This script cannot run posix-only mode."
   exit 1
elif [ ${BASH_VERSINFO[0]} -lt 4 ]; then
   echo "[bl_dep] This script needs at least bash version 4.x"
   exit 1
fi

if [ -z $BL_SRC ]; then
   echo "[bl_dep] You need to set BL_SRC."
   exit 1
fi

if [ ! -e $BL_DEP_VERSION_FILE ]; then
   echo "[bl_dep] You need to checkout a specific version."
   exit 1
fi

read -r BL_DEP_VERSION < $BL_DEP_VERSION_FILE   # read first line

if [ "$BL_DEP_VERSION_REQUIRED" != "unknown" ]; then
   bl_dep_check_version $BL_DEP_VERSION_REQUIRED
   if [ $? -eq 1 ]; then
      echo "[bl_dep] This script requires a different version of bashlib."
      exit 1
   fi
fi
