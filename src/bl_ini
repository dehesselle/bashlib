################################################################################
#                                                                              #
#   bl_ini - reading and writing INI files                                     #
#                                                                              #
#   https://github.com/dehesselle/bashlib                                      *
#                                                                              #
################################################################################
#                                                                              #
#   remarks                                                                    #
#   -------                                                                    #
#                                                                              #
#   - not designed to handle multiple INI files simultaneously                 #
#                                                                              #
################################################################################

[ -z $BL_INI_INCLUDED ] && BL_INI_INCLUDED=true || return

### INCLUDES ###################################################################

. $BL_SRC/bl_dep
. $BL_SRC/bl_fs
. $BL_SRC/bl_kvs
. $BL_SRC/bl_log
. $BL_SRC/bl_str

### VARIABLES ##################################################################

[ -z $BL_INI_DIR ] && BL_INI_DIR=$BL_FS_MYSELF_DIR

[ -z $BL_INI_FILE_NAME ] && BL_INI_FILE_NAME=$BL_FS_MYSELF_NAME.ini

[ -z $BL_INI_FILE ] && BL_INI_FILE=$BL_INI_DIR/$BL_INI_FILE_NAME

### SETTINGS ###################################################################

shopt -s expand_aliases

### FUNCTIONS ##################################################################

# bl_ini_read {filename}
#
# filename     read the data from this INI file
#
function bl_ini_read
{
   local file=$1

   if   [ ! -f $file ]; then
      bl_log_e "settings not found: $(bl_fs_get_filename $file)"
   elif [ ! -r $file ]; then
      bl_log_e "settings not readable: $(bl_fs_get_filename $file)"
   else
      bl_log_i "settings: $file"

      local section=global
      local count=0

      while read line || [ -n "$line" ]; do
         ((count++))

         if   $(bl_str_is_empty $line); then
            :   # empty line, do nothing
         elif [[ $line =~ ^(\ )*#.* ]]; then
            :   # comment, do nothing
         elif [[ $line =~ ^\[(${BL_KVS_BRANCH_REGEX})\].* ]]; then
#           it's a section header
            section=${BASH_REMATCH[1]}
         elif [[ $line =~ ^(${BL_KVS_LEAF_REGEX})\ *=\ *(.*) ]]; then
#           it's a key-value pair, i.e. "key = value"
            local key=$section.${BASH_REMATCH[1]}
            local value=${BASH_REMATCH[2]}

            BL_KVS_DATA[$key]="$value"
         else
            bl_log_e "malformed line $count in $(bl_fs_get_filename $file)"
            bl_log_d "line $line_count: '$line'"
         fi

      done < $file
   fi
}

alias bl_ini_get='bl_kvs_get'
alias bl_ini_set='bl_kvs_set'

# bl_ini_get_list section.key [separator] [count]
#
# section.key     name of section and keys (without index!) to retrieve
# separator       character to separate list items from each other
# count           the number of entries to retrieve
#
function bl_ini_get_list
{
   local key=$1
   local separator=$2
   local count=$3

#  quotation marks handle whitespace
   $(bl_str_is_empty "$separator") && separator=" "

   local branch=$(bl_kvs_key_get_part branch $key)

   if $(bl_str_is_empty $branch); then
      count=0   # disable the 'for' loop below
      bl_log_e "invalid key: $key"
   else
      if $(bl_str_is_empty $count); then
         count=$(bl_kvs_get $branch.count)
         
         if $(bl_str_is_empty $count); then
            bl_log_e "no value for 'count'"
            count=0   # disable the 'for' loop below
         fi
      fi
   fi

   local list
   for ((i=0; i<$count; i++)); do
      if [ $i -gt 0 ]; then
         list="$list$separator$(bl_kvs_get $key$i)"
      else
         list=$(bl_kvs_get $key)
      fi
   done

   echo $list
}

# bl_ini_write {filename}
#
# {filename}     write to this file
#
function bl_ini_write
{
   local file=$1

   > $file   # truncate file

#  This only works because keys in an associative array are automatically
#  sorted.

   local section_old

   for i in "${!BL_KVS_DATA[@]}"; do
      local branch=$(bl_kvs_key_get_part branch $i)
      local leaf=$(bl_kvs_key_get_part leaf $i)

      if [ "$section_old" != "$branch" ]; then
         echo "" >> $file
         echo "[$branch]" >> $file   # section header
      fi

      echo "$leaf = ${BL_KVS_DATA[$i]}" >> $file

      section_old=$branch
   done
}

### RUN ########################################################################

# automatically read the INI file if there's one
if [ -f $BL_INI_FILE ]; then
   bl_ini_read $BL_INI_FILE
fi
