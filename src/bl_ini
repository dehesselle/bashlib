################################################################################
#                                                                              #
#   bl_ini:  reading and writing *.ini files                                   #
#                                                                              #
#                                                                              #
#                                                                              #
#   https://github.com/dehesselle/bashlib                                      *
#                                                                              #
################################################################################

if [ -z $BL_INI_INCLUDED ]; then
   BL_INI_INCLUDED=true
else
   return
fi

### INCLUDES ###################################################################

. $BL_SRC/bl_dep
source $BL_SRC/bl_fs
source $BL_SRC/bl_log
source $BL_SRC/bl_str

### VARIABLES ##################################################################

# These arrays hold all the data that is read/written from/to *.ini files.
# Calling 'bl_ini_set' and 'bl_ini_get' writes/reads to them.
declare -a BL_INI_SECTION
declare -a BL_INI_KEY
declare -a BL_INI_VALUE

BL_INI_KEY_COUNT=0

if [ -z $BL_INI_DIR ]; then
   BL_INI_DIR=$BL_FS_MYSELF_DIR
fi

if [ -z $BL_INI_FILE ]; then
   BL_INI_FILE=$BL_INI_DIR/$BL_FS_MYSELF_NAME.ini
fi

BL_INI_SECTION_REGEX=[A-Za-z0-9_]+
BL_INI_KEY_REGEX=[A-Za-z]{1}[A-Za-z0-9_]*

### FUNCTIONS ##################################################################

# bl_ini_read {filename}
#
# filename     read the data from this *.ini file
#
function bl_ini_read
{
   local file=$1

   if   [ ! -f $file ]; then
      bl_log_e "file not found: $(bl_fs_get_filename $file)"
   elif [ ! -r $file ]; then
      bl_log_e "file not readable: $(bl_fs_get_filename $file)"
   else
      bl_log_i "file: $file"

      local section=global
      local line_count=0

      BL_INI_KEY_COUNT=0

      while read line || [ -n "$line" ]; do
         ((line_count++))

         if   $(bl_str_is_empty $line); then
            :   # empty line, do nothing
         elif [[ $line =~ ^(\ )*#.* ]]; then
            :   # comment, do nothing
         elif [[ $line =~ ^\[(.+)\].* ]]; then
#           it's a section header
            section=${BASH_REMATCH[1]}
         elif [[ $line =~ ^(${BL_INI_KEY_REGEX})\ *=\ *(.*) ]]; then
#           it's a key-value pair, i.e. "key = value"

            BL_INI_SECTION[$BL_INI_KEY_COUNT]=$section
            BL_INI_KEY[$BL_INI_KEY_COUNT]=${BASH_REMATCH[1]}
            BL_INI_VALUE[$BL_INI_KEY_COUNT]=${BASH_REMATCH[2]}

            ((BL_INI_KEY_COUNT++))
         else
            bl_log_e "malformed line $line_count in $(bl_fs_get_filename $file)"
            bl_log_d "line $line_count: '$line'"
         fi

      done < $file
   fi

# for debugging purposes only
#
#   for i in {1..5}; do
#      echo "s[${BL_INI_SECTION[$i]}]"
#      echo "k[${BL_INI_KEY[$i]}]"
#      echo "v[${BL_INI_VALUE[$i]}]"
#   done
}

# bl_ini_get {section.key}
#
# section.key     section and key to assign a value to, separated by a dot
# value           the value to be assigned to the key
#
function bl_ini_get
{
#  '$section_key' is supposed to be "section.key"
   local section_key=$1

   if [[ $section_key =~ ^(${BL_INI_SECTION_REGEX})\.(${BL_INI_KEY_REGEX})$ ]]; then
      local section=${BASH_REMATCH[1]}
      local key=${BASH_REMATCH[2]}

      for ((i=0; i<$BL_INI_KEY_COUNT; i++)); do
         if    [ ${BL_INI_KEY[$i]} = $key ] &&
               [ ${BL_INI_SECTION[$i]} = $section ]; then
            echo "${BL_INI_VALUE[$i]}"
            break
         fi
      done
   else
      bl_log_e "invalid argument: $section_key"
   fi
}

# bl_ini_get_list section.key [separator] [count]
#
# section.key     name of section and keys (without index!) to retrieve
# separator       character to separate list items from each other
# count           the number of entries to retrieve
#
function bl_ini_get_list
{
   local section_key=$1
   local separator=$2
   local count=$3

   if $(bl_str_is_empty "$separator"); then   # quot. marks handle whitespace
      separator=" "
   fi

   if $(bl_str_is_empty $count); then

      if [[ $section_key =~ (${BL_INI_SECTION_REGEX})\.(${BL_INI_KEY_REGEX}) ]]; then
         local section=${BASH_REMATCH[1]}
         local key=${BASH_REMATCH[2]}
         count=$(bl_ini_get $section.count)
      else
         bl_log_e "invalid argument: $section_key"
         count=0
      fi

      if $(bl_str_is_empty $count); then
         bl_log_e "missing value for 'count'"
         count=0
      fi
   fi

   local list=
   for ((i=0; i<$count; i++)); do
      if [ $i -gt 0 ]; then
         list="$list$separator$(bl_ini_get $section_key$i)"
      else
         list=$(bl_ini_get $section_key$i)
      fi
   done
   echo $list
}

# bl_ini_set {section.key} {value}
#
# section.key     section and key to assign a value to, separated by a dot
# value           the value to be assigned to the key
#
function bl_ini_set
{
   local section_key=$1
   local value=$2

   if [[ $section_key =~ (${BL_INI_SECTION_REGEX})\.(${BL_INI_KEY_REGEX}) ]]; then
      local section=${BASH_REMATCH[1]}
      local key=${BASH_REMATCH[2]}
      local key_found=false

      for ((i=1; i<=$BL_INI_KEY_COUNT; i++)); do
         if    [ ${BL_INI_KEY[$i]} = $key ] &&
               [ ${BL_INI_SECTION[$i]} = $section ]; then
            BL_INI_VALUE[$i]=$value
            key_found=true
            break
         fi
      done

      if ! $key_found; then
         ((BL_INI_KEY_COUNT++))
         BL_INI_SECTION[$BL_INI_KEY_COUNT]=$section
         BL_INI_KEY[$BL_INI_KEY_COUNT]=$key
         BL_INI_VALUE[$BL_INI_KEY_COUNT]=$value
      fi

   else
      bl_log_e "invalid argument: $section_key"
   fi
}

# bl_ini_write {filename}
#
# {filename}     write to this file
#
function bl_ini_write
{
   local file=$1

   > $file   # truncate file

#  get a list of all sections
   local sections=
   for (( i=1; i<=$BL_INI_KEY_COUNT; i++ )); do
      if [[ $sections != *${BL_INI_SECTION[$i]}* ]]; then
         sections="$sections ${BL_INI_SECTION[$i]}"
      fi
   done

   bl_log_d "sections: $sections"

   for section in $sections; do
      echo "[$section]" >> $file   # section header

# write all key-value pairs for that section
      for ((i=1; i<=$BL_INI_KEY_COUNT; i++)); do
         if [[ ${BL_INI_SECTION[$i]} = $section ]]; then
# TODO: Do we want this? Need to look up if there's a standard.
# ---
# add quotation marks to enclose the value if it contains spaces
#            if [[ ${BL_INI_VALUE[$i]:0:1} != \" ]] &&
#               [[ ${BL_INI_VALUE[$i]} = *" "* ]]; then
#               echo "${BL_INI_KEY[$i]} = \"${BL_INI_VALUE[$i]}\"" >> $file
#            else
               echo "${BL_INI_KEY[$i]} = ${BL_INI_VALUE[$i]}" >> $file
#            fi
         fi
      done

      echo "" >> $file   # newline to separate sections visually
   done
}

### RUN ########################################################################

# automatically read the *.ini file if there's one
if [ -f $BL_INI_FILE ]; then
   bl_ini_read $BL_INI_FILE
fi
