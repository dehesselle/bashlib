################################################################################
#                                                                              #
#   bl_str:  bash library, string related functions                            #
#                                                                              #
#                                                                              #
#                                                                              #
#   https://github.com/dehesselle/bashlib                                      *
#                                                                              #
################################################################################

[ -z $BL_STR_INCLUDED ] && BL_STR_INCLUDED=true || return

### INCLUDES ###################################################################

. $BL_SRC/bl_dep

### VARIABLES ##################################################################

# nothing here yet

### FUNCTIONS ##################################################################

function bl_str_get_char_count
{
   local string=$1
   local character=$2

# use parameter expansion/string substitution to count the characters
   local count=${string//[^$character]}
# length of the remaining characters is what we're looking for
   count=${#count}

   echo $count
}

function bl_str_is_empty
{
   local string=$1
    
   [ ${#string} -eq 0 ] && echo true || echo false
}

function bl_str_mask_after
{
   local text=$1
   local keyword=$2

   if [[ "$text" =~ (.*)( $keyword )([^\ ]+)(.*) ]]; then
      local textMasked="${BASH_REMATCH[1]}${BASH_REMATCH[2]}XXXXXX${BASH_REMATCH[4]}"
   else
      local textMasked=$text
   fi

   echo $textMasked
}

function bl_str_brackets
{
   local string=$1
   [ ${#string} -ne 0 ] && echo "[$string]"
}

function bl_str_get_part
{
   local string=$1
   local separator=$2
   local partNo=$3

   local startPos=0
   local stringPart=
   local count=0
  
#  The easier way would be to loop using the IFS, but that would lose
#  trailing whitespaces if there were more than one.
   
   for ((i=0; i<${#string}; i++)); do
      if [ "${string:i:1}" = "$separator" ]; then
         stringPart=${string:startPos:i-startPos}
         startPos=$((i+1))
         count=$((count+1))

         [ $count -eq $partNo ] && break
      fi
   done

   [ $count -ne $partNo ] && stringPart=${string:startPos}

   echo $stringPart
}

### RUN ########################################################################

# nothing here
