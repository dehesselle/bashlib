################################################################################
#                                                                              #
#   bl_dmn:  bash library, functions for daemons                               #
#                                                                              #
#                                                                              #
#                                                                              #
#   RenÃ© de Hesselle                                                           #
#                                                                              #
################################################################################

if [ -z $BL_DMN_INCLUDED ]; then
   BL_DMN_INCLUDED=true
else
   return
fi

### INCLUDES ###################################################################

. $BL_SRC/bl_dep
source $BL_SRC/bl_fs
source $BL_SRC/bl_log
source $BL_SRC/bl_run
source $BL_SRC/bl_str
source $BL_SRC/bl_ui

### VARIABLES ##################################################################

if [ -z $BL_DMN_PID_DIR ]; then
   BL_DMN_PID_DIR=$BL_FS_TMP_DIR
fi

BL_DMN_PIDFILE=$BL_DMN_PID_DIR/$BL_FS_MYSELF_NAME.pid

### FUNCTIONS ##################################################################

# get pid based on pidfile
function bl_dmn_get_pid
{
#  provide the means for a custom function
   if $(bl_dep_check_func daemon_get_pid); then
      echo $(daemon_get_pid)
   else
      if [ -f $BL_DMN_PIDFILE ]; then
         local pid=$(cat $BL_DMN_PIDFILE)

         if $(bl_run_pid_check $pid); then
            echo $pid   # ok
         else
            bl_log_d "pidfile: $pid"
            echo -1   # process not found
         fi
      else
         echo -2   # no pidfile
      fi
   fi
}

function bl_daemon_run
{
   local parameter=$1

   bl_log_d "calling 'daemon_run'"
   daemon_run $parameter

   bl_log_i "shutting down"
   bl_run $BL_DMN_PIDFILE
}

function bl_dmn_start
{
   local parameter=$1

   local bl_dmn_start_rc=0

#  Since 'bl_daemon_run' is only a wrapper for a custom 'daemon_run'
#  we need to check for the latter.
   if $(bl_dep_check_func daemon_run); then
      bl_daemon_run $parameter &

#     This is the pid from the backgrounded shell. It may be the wrong one
#     for us to use in case the script supplies its own function to determine
#     the pid.
      local pid=$!
      echo $pid > $BL_DMN_PIDFILE   # may be overwritten (see below)
      bl_log_d "backgrounded 'bl_daemon_run' as pid $pid"

#     We wait for the process to come up and also get the pid we need.
      pid=$(bl_dmn_get_pid)
      local seconds=0

      while [ $pid -lt 0 ] && [ $seconds -lt 6 ]; do
         bl_log_i "waiting for process to come up"
         sleep 1
         ((seconds++))
         pid=$(bl_dmn_get_pid)
      done

      if [ $pid -gt 0 ] && $(bl_run_pid_check $pid); then
         bl_log_ii "backgrounded $BL_FS_MYSELF_NAME, pid is \
$(bl_ui_col purple $pid)"
         echo $pid > $BL_DMN_PIDFILE
      else
         bl_log_ee "failed to start $BL_FS_MYSELF_NAME"
         bl_dmn_start_rc=1
      fi
   else
      bl_log_ee "function not implemented: $command"
      bl_dmn_start_rc=1
   fi

   return $bl_dmn_start_rc
}

function bl_dmn_stop
{
   local pid=$(bl_dmn_get_pid)
   local bl_dmn_stop_rc=0

   if [ $pid -gt 0 ]; then
      bl_log_ii "stopping pid $(bl_ui_col purple $pid)"
      kill -TERM $pid

      local seconds=0

      while $(bl_run_pid_check $pid) && [ $seconds -lt 6 ]; do
         bl_log_i "waiting for process to shut down"
         sleep 1
         ((seconds++))
      done

      if $(bl_run_pid_check $pid); then
         bl_log_ee "failed to stop $BL_FS_MYSELF_NAME"
         bl_dmn_stop_rc=1
      else
         if [ -f $BL_DMN_PIDFILE ]; then
            bl_run rm $BL_DMN_PIDFILE
         fi
      fi
   else
      bl_log_ii "nothing to stop"
   fi

   return $bl_dmn_stop_rc
}

function bl_dmn_status
{
   local pid=$(bl_dmn_get_pid)

   case $pid in
      -1) bl_log_ww "process seems to have died" ;;
      -2) bl_log_ii "process is not running"     ;;
       *)
#        This check is a precaution since we don't know what a custom
#        'daemon_get_pid' function might return to us.
         if [ $pid -gt 0 ]; then
            bl_log_ii "process is running (pid $(bl_ui_col purple $pid))"
         else
            bl_log_ee "this should not happen: pid $pid"
         fi
         ;;
   esac

   return 0
}

function bl_dmn_print_usage
{
   bl_log_ii "usage: $0 {start|stop|restart|status}"
}

function bl_dmn_dispatch
{
   local command=$1
   local parameter=$2

   local bl_dmn_dispatch_rc=0

   if [ $# -gt 2 ]; then
      bl_log_w "only processing first two arguments"
   fi

   bl_log_i "command: $command"

   if ! $(bl_str_is_empty $parameter); then
      bl_log_i "parameter: $parameter"
   fi

   case "$command" in
      start)
         local pid=$(bl_dmn_get_pid)
         case $pid in
            -1)
               bl_log_w "previously unclean exit (stale pidfile)"
               bl_dmn_start $parameter
               bl_dmn_dispatch_rc=$?
               ;;
            -2)   # ok
               bl_dmn_start $parameter
               bl_dmn_dispatch_rc=$?
               ;;
             *)
               bl_log_ii "$BL_FS_MYSELF_NAME already running \
(pid $(bl_ui_col purple $pid))"
               bl_dmn_dispatch_rc=1
               ;;
         esac
         ;;
      stop|status)
         if $(bl_dep_check_func daemon_$command); then
            daemon_$command $parameter
            bl_dmn_dispatch_rc=$?
         else
            bl_dmn_$command
            bl_dmn_dispatch_rc=$?
         fi
         ;;
      restart)
         if $(bl_dep_check_func daemon_stop); then
            daemon_stop $parameter
            bl_dmn_dispatch_rc=$?
         else
            bl_dmn_stop
            bl_dmn_dispatch_rc=$?
         fi
         sleep 1
         bl_dmn_start $parameter
         bl_dmn_dispatch_rc=$?
         ;;
      *)
         if $(bl_dep_check_func daemon_print_usage); then
            daemon_print_usage
         else
            bl_dmn_print_usage
         fi
         ;;
   esac

   return $bl_dmn_dispatch_rc
}

### RUN ########################################################################

bl_dep_check_pgm awk
bl_dep_check_pgm cat
bl_dep_check_pgm grep
bl_dep_check_pgm kill
bl_dep_check_pgm ps
bl_dep_check_pgm sleep
bl_dep_check_pgm wc

if ! $(bl_fs_is_dir_writable $BL_DMN_PID_DIR); then
   bl_log_ee "not writable: $BL_DMN_PID_DIR"
   exit 1
fi
