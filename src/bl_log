################################################################################
#                                                                              #
#   bl_log:  bash library, logging functions                                   #
#                                                                              #
#                                                                              #
#                                                                              #
#   https://github.com/dehesselle/bashlib                                      *
#                                                                              #
################################################################################

if [ -z $BL_LOG_INCLUDED ]; then
   BL_LOG_INCLUDED=true
else
   return
fi

### INCLUDES ###################################################################

. $BL_SRC/bl_dep
. $BL_SRC/bl_fs_base
. $BL_SRC/bl_exit_base
. $BL_SRC/bl_time
. $BL_SRC/bl_ui

### VARIABLES ##################################################################

if [ -z $BL_LOG_DEBUG_ENABLE ]; then
   BL_LOG_DEBUG_ENABLE=false
fi

if [ -z $BL_LOG_CANONICAL_ENABLE ]; then
   BL_LOG_CANONICAL_ENABLE=false
fi

if [ -z $BL_LOG_DIR ]; then
   BL_LOG_DIR=$BL_FS_TMP_DIR
fi

if [ -z $BL_LOG_FILE_NAME ]; then
   if $BL_LOG_CANONICAL_ENABLE; then
      BL_LOG_FILE_NAME=$BL_FS_MYSELF_NAME_CANONICAL.log
   else
      BL_LOG_FILE_NAME=$BL_FS_MYSELF_NAME.log
   fi
fi

if [ -z $BL_LOG_FILE ]; then
   BL_LOG_FILE=$BL_LOG_DIR/$BL_LOG_FILE_NAME
fi

BL_LOG_USER=$(whoami)

### FUNCTIONS ##################################################################

function bl_log_level_to_str
{
   local level=$1

   if   [ "$level" = "E" ]; then
      echo "$(bl_ui_col_bg red error)"
   elif [ "$level" = "W" ]; then
      echo "$(bl_ui_col_bg yellow warning)"
   elif [ "$level" = "I" ]; then
      echo "$(bl_ui_col_bg green info)"
   elif [ "$level" = "D" ]; then
      echo "$(bl_ui_col_bg cyan debug)"
   fi
}

# enable alias expansion
shopt -s expand_aliases

# bl_log_write <function> <source> <mode> <target> <level> <message>
#
# function     name of the function that is logging; needs to be
#              enclosed in square brackets, e.g. "[myfunction]"
# source       name of the source file that is logging; needs to be
#              enclosed in square brackets, e.g. "[myfile]"
# mode         write to stdout, file or both {1|2|3}
# target       file to write message to
# level        log level {D|I|W|E}
# message      the message you want to log
#
function bl_log_write
{
#
#  log format is "<timestamp> <level> <pid> {<function>|<file>} <message>", e.g.
#
#  20150228-131012 I 1234 [myFunc] This is just an example.
#
   if [ "${1:1:1}" = "]" ]; then   # function name empty?
      if [ "${2:1:1}" = "]" ]; then   # file name empty?
         local source=
      else
         local source=" $2 "
      fi
   else
      local source=" $1 "
   fi

   local mode=$3
   local target=$4
   local level=$5
   local message="${*:6}"

   local rc=0

   if [ $mode -eq 3 ] || [ $mode -eq 1 ]; then
      echo -e "$(bl_log_level_to_str $level) $message"
   fi

   if [ $mode -eq 3 ] || [ $mode -eq 2 ]; then
      echo "$(bl_time_get log) $level $$$source$(bl_ui_col_remove $message)" \
>>$target
      rc=$?
   fi

   return $rc
}

alias bl_log_d='bl_log_write "[${FUNCNAME%.*}]" "[${BASH_SOURCE##*/}]" 2 $BL_LOG_FILE D'
alias bl_log_i='bl_log_write "[${FUNCNAME%.*}]" "[${BASH_SOURCE##*/}]" 2 $BL_LOG_FILE I'
alias bl_log_w='bl_log_write "[${FUNCNAME%.*}]" "[${BASH_SOURCE##*/}]" 2 $BL_LOG_FILE W'
alias bl_log_e='bl_log_write "[${FUNCNAME%.*}]" "[${BASH_SOURCE##*/}]" 2 $BL_LOG_FILE E'
alias bl_log_dd='bl_log_write "[${FUNCNAME%.*}]" "[${BASH_SOURCE##*/}]" 3 $BL_LOG_FILE D'
alias bl_log_ii='bl_log_write "[${FUNCNAME%.*}]" "[${BASH_SOURCE##*/}]" 3 $BL_LOG_FILE I'
alias bl_log_ww='bl_log_write "[${FUNCNAME%.*}]" "[${BASH_SOURCE##*/}]" 3 $BL_LOG_FILE W'
alias bl_log_ee='bl_log_write "[${FUNCNAME%.*}]" "[${BASH_SOURCE##*/}]" 3 $BL_LOG_FILE E'

function bl_log_on_exit
{
#  We do not use 'bl_log_i' here because we want to avoid the function
#  name being printed in the log. The "end of log"/last message in the
#  log is supposed to look like the "begin of log"/first message.
#  See the "RUN" section below.
   bl_log_write [] [] 2 $BL_LOG_FILE I \
"****END**** $BL_DEP_VERSION, $BL_FS_MYSELF_DIR/$BL_FS_MYSELF_NAME, \
$BL_LOG_USER"
}

### RUN ########################################################################

bl_dep_check_pgm touch
bl_dep_check_pgm whoami

touch $BL_LOG_FILE 1>/dev/null 2>&1

[ $? -eq 0 ] && bl_log_write [] [] 2 $BL_LOG_FILE I \
"***BEGIN*** $BL_DEP_VERSION, $BL_FS_MYSELF_DIR/$BL_FS_MYSELF_NAME, \
$BL_LOG_USER"

if [ $? -eq 0 ]; then   # logfile writable?
   bl_exit_func_add_back bl_log_on_exit   # "end of log" as last message

   if ! $BL_LOG_DEBUG_ENABLE; then
#     disable all debug logging by turning statements into NOOPs
      alias bl_log_d=': '
      alias bl_log_dd=': '
   fi
else   # logfile not writable
   bl_log_write [] [$BASH_SOURCE] 1 $BL_LOG_FILE E "logfile disabled, \
not writable: $BL_LOG_FILE"

#  disable logging to file
   alias bl_log_d=': '
   alias bl_log_i=': '
   alias bl_log_w=': '
   alias bl_log_e=': '
   alias bl_log_dd='bl_log_write "[]" "[]" 1 $BL_LOG_FILE D'
   alias bl_log_ii='bl_log_write "[]" "[]" 1 $BL_LOG_FILE I'
   alias bl_log_ww='bl_log_write "[]" "[]" 1 $BL_LOG_FILE W'
   alias bl_log_ee='bl_log_write "[]" "[]" 1 $BL_LOG_FILE E'
fi
