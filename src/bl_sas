################################################################################
#                                                                              #
#   bl_sas:  bash library, sas functions                                       #
#                                                                              #
#                                                                              #
#                                                                              #
#   https://github.com/dehesselle/bashlib                                      *
#                                                                              #
################################################################################

[ -z $BL_SAS_INCLUDED ] && BL_SAS_INCLUDED=true || return

### INCLUDES ###################################################################

. $BL_SRC/bl_dep
. $BL_SRC/bl_log
. $BL_SRC/bl_str
. $BL_SRC/bl_ini
. $BL_SRC/bl_fs
. $BL_SRC/bl_run_base

### VARIABLES ##################################################################

[ -z $BL_SAS_HOME ] && BL_SAS_HOME=/opt/sas

[ -z $BL_SAS_VERSION ] && BL_SAS_VERSION=9.4

[ -z $BL_SAS_ROOT ] && BL_SAS_ROOT=$BL_SAS_HOME/SASFoundation/$BL_SAS_VERSION

[ -z $BL_SAS_CONFIG ] && BL_SAS_CONFIG=   # no way to guess sane default

[ -z $BL_SAS_APPCONTEXT ] && BL_SAS_APPCONTEXT=SASApp

### FUNCTIONS ##################################################################

function bl_sas_exec_batch
{
   local pgm=$1
   local log=$2
   local opt=$3

   if $(bl_str_is_empty $BL_SAS_CONFIG); then
      bl_log_e "you need to set 'BL_SAS_CONFIG'"
      return 1
   else
      local cmd="$BL_SAS_CONFIG/$BL_SAS_APPCONTEXT/BatchServer/sasbatch.sh"
      if [ ! -f $cmd ]; then
         bl_log_e "cannot find Batchserver: $cmd"
         return 1
      fi
   fi

   local cmd="$cmd -xcmd -batch -noterminal"

   bl_sas_exec "$cmd" $pgm $log "$opt"

   return $?
}

function bl_sas_exec_base
{
   local pgm=$1
   local log=$2
   local opt=$3

   bl_sas_exec "$BL_SAS_ROOT/sas" $pgm $log "$opt"

   return $?
}

function bl_sas_exec_base_u8
{
   local pgm=$1
   local log=$2
   local opt=$3

   bl_sas_exec "$BL_SAS_ROOT/bin/sas_u8" $pgm $log "$opt"

   return $?
}

function bl_sas_exec
{
   local cmd=$1   # sas executor (SAS Foundation, BatchServer, ...)
   local pgm=$2   # run this program
   local log=$3   # logfile
   local opt=$4   # optional arguments

   if [[ "$opt" =~ .*\ \-print\ .* ]]; then   # contains '-print'?
      :   # yes: do nothing
   else
      opt="$opt -print /dev/null"   # no: discard print output
   fi

   cmd="$cmd -log $log -sysin $pgm $opt"

   bl_run $cmd
   local rc=$?

#  We need to scan the log for errors and warnings regardless of the returncode.
#  It is possible to get a "rc=0" despite having errors in the log.

   local err_count=$(bl_sas_get_err_count $log)
   local warn_count=$(bl_sas_get_warn_count $log)

   if [ $rc -eq 0 ]; then
      if [ $err_count -eq 0 ]; then
         if [ $warn_count -eq 0 ]; then
            bl_log_i "success (rc=$rc): $pgm"
         else
            bl_log_w "tainted (rc=$rc): $pgm finished with \
$warn_count warning(s)"
         fi
      else
         bl_log_e "failure (rc=$rc): $pgm finished with \
$err_count error(s), $warn_count warning(s)"
      fi
   else
      if [ $err_count -eq 0 ]; then
         bl_log_w "tainted (rc=$rc): $sas_pgm finished with \
$err_count error(s), $warn_count warning(s)"
      else
         bl_log_e "failure (rc=$rc): $sas_pgm finished with \
$err_count errors, $warn_count warnings"
      fi
   fi

   return $rc
}

function bl_sas_get_warn_count
{
   local log=$1
   echo $(grep -e "^WARNING: .*" $log 2>/dev/null | wc -l)
}

function bl_sas_get_err_count
{
   local log=$1
   echo $(grep -e "^ERROR: .*" $log 2>/dev/null | wc -l)
}

function bl_sas_export_object
{
   local ini_file=$1
   local meta_type=$2
   local meta_obj=${@:3}   # arguments 3...n; only documentational

#  Delete this?
#  yes: We use this function only for specific metadata types and only one
#       specific type each call. We use that as package name.
#  no:  We want to be more flexible here in the future ...?
#
#   local pkg_name=$4
#   if $(bl_str_is_empty $pkg_name); then
#      pkg_name=${meta_type}
#   fi

   local pkg_name=$meta_type
   local target_dir=$(bl_fs_new_temp_dir)

   local cmd=$target_dir/E_$pkg_name.sh

   $(bl_ini_read $ini_file; echo -e "\
#!/bin/bash
$BL_SAS_HOME/SASPlatformObjectFramework/$BL_SAS_VERSION/ExportPackage \\
-subprop \\
-host $(bl_ini_get sas.metaserver) \\
-port $(bl_ini_get sas.metaport) \\
-user $(bl_ini_get sas.metauser) \\
-password $(bl_ini_get sas.metapass) \\
-package $target_dir/$pkg_name \\
-log $target_dir/E_$pkg_name.log \\
-types \"$meta_type\" \\
-objects \\" > $cmd
   for obj in "${@:3}"; do
      echo "\"$obj\" \\" >> $cmd
   done
   echo -e "\
1>$target_dir/E_$pkg_name.stdout \\
2>$target_dir/E_$pkg_name.stderr
exit \$?" >> $cmd)

   chmod 755 $cmd 1>>$BL_LOG_FILE 2>&1

   bl_run_nolog $cmd
   local rc=$?

   if [ $rc -eq 0 ]; then
      bl_log_i "export successful: $pkg_name"
   else
      bl_log_e "export failed with rc=$rc"
   fi

   echo $target_dir
   return $rc
}

function bl_sas_import_package
{
   local ini_file=$1
   local source_dir=$2
   local meta_folder=$3
   local pkg_name=$4
   local options=$5   # optional: custom options for ImportPackage

   $(bl_str_is_empty $pkg_name) && pkg_name=$meta_type

   local cmd=$source_dir/I_$pkg_name.sh

   $(bl_ini_read $ini_file; echo -e "\
#!/bin/bash
$BL_SAS_HOME/SASPlatformObjectFramework/$BL_SAS_VERSION/ImportPackage \\
-target \"$meta_folder\" \\
-preservePaths \\
-subprop $source_dir/$pkg_name.subprop \\
-host $(bl_ini_get sas.metaserver) \\
-port $(bl_ini_get sas.metaport) \\
-user $(bl_ini_get sas.metauser) \\
-password $(bl_ini_get sas.metapass) \\
-package $source_dir/$pkg_name \\
-log $source_dir/I_$pkg_name.log \\
$options \\
1>$source_dir/I_$pkg_name.stdout \\
2>$source_dir/I_$pkg_name.stderr
exit \$?" >> $cmd)

   bl_run chmod 755 $cmd

   bl_run_nolog $cmd
   local rc=$?

   if [ $rc -eq 0 ]; then
      bl_log_i "import successful: $pkg_name"
   else
      bl_log_e "import failed with rc=$rc"
   fi

   return $rc
}

function bl_sas_compare
{
   local file1=$1
   local file2=$2
   local sas_exec=$3

   if $(bl_str_is_empty $sas_exec); then
      sas_exec=bl_sas_exec_base
   fi

   local pgm=$(bl_fs_new_temp_file)

   echo -e "\
libname lib1 \"$(bl_fs_get_dirname_fq $file1)\";\n\
libname lib2 \"$(bl_fs_get_dirname_fq $file2)\";\n\
\n\
proc compare base=lib1.$(bl_fs_get_filename $file1)\n\
          compare=lib2.$(bl_fs_get_filename $file2)\n\
          noprint;\n\
run;\n\
\n\
%put SYSINFO=&SYSINFO.;\n\
" > $pgm

   local log=$(bl_fs_new_temp_file)

   $sas_exec $pgm $log

   #bl_exit_on_rc

   rm $pgm

   if [ $(grep "SYSINFO=0" $log | wc -l) -eq 1 ]; then
      rm $log
      echo true
   else
      rm $log
      echo false
   fi
}

### RUN ########################################################################

bl_dep_check_pgm grep
bl_dep_check_pgm wc
