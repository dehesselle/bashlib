################################################################################
#                                                                              #
#   bl_pld:  bash library, payload functions                                   #
#                                                                              #
#                                                                              #
#                                                                              #
#   https://github.com/dehesselle/bashlib                                      *
#                                                                              #
################################################################################

[ -z $BL_PLD_INCLUDED ] && BL_PLD_INCLUDED=true || return

### INCLUDES ###################################################################

. $BL_SRC/bl_dep
source $BL_SRC/bl_str
source $BL_SRC/bl_fs
source $BL_SRC/bl_log

### VARIABLES ##################################################################

# This regex describes how the payload header has to look like to be recognized
# as such, with one additional tweak: it actually only looks like
# "###PAYLOADn###", but we'll be instructing grep to prepend found matches
# with the line number ('-n' option, see below), so we have to account for that
# as well.
BL_PLD_HEADER_REGEX="([0-9]+):###PAYLOAD([0-9]+)###"

declare -a BL_PLD_BEGIN   # a payload's first line no.
declare -a BL_PLD_END     # a payload's last line no.

### SETTINGS ###################################################################

shopt -s expand_aliases   # enable alias expansion

### FUNCTIONS ##################################################################

# bl_pld_find <file>
#
# file     name of the file to parse for payload
#
# This function parses a file for payload. It recognizes payload by its
# header which has to look like 'BL_PLD_HEADER_REGEX' describes it.
# The numbers of the first and last line of each payload will be stored
# in the 'BL_PLD_BEGIN' and 'BL_PLD_END' arrays.
#
function bl_pld_find
{
   local file=$1

   $(bl_str_is_empty $file) && file=$BL_FS_MYSELF_DIR/$BL_FS_MYSELF_NAME

   local index=0         # index of currenct payload
   local index_prev=0    # index of previous payload

   while IFS= read -r line; do
      if [[ $line =~ $BL_PLD_HEADER_REGEX ]]; then

         index=${BASH_REMATCH[2]}
         BL_PLD_BEGIN[$index]=$(( ${BASH_REMATCH[1]} + 1 ))

         if [ $index_prev -ne 0 ]; then   # This is not the first payload?
#           We determine the length of a payload as header-to-header. The
#           start of the next payload marks the end of the previous one.
            BL_PLD_END[$index_prev]=$(( ${BL_PLD_BEGIN[$index]} - 2 ))
         fi

         index_prev=$index
      fi
   done < <(grep -n "[#]##PAYLOAD" $file)   # need to avoid subshell

#  The end of the last payload is the end of the file.
   BL_PLD_END[$index]=$(cat $file | wc -l)   # lines total

   [ $index -eq 0 ] && bl_log_i "no payload found" || bl_log_i "payload found"
}

# bl_pld_extract_raw <payload> <target> <source>
#
# payload     the number of the payload to extract
# target      the file that the extracted payload is written to
# source      the file that the payload is extracted from
#
# This function copies a payload from the source file to a target file.
# It reads the number of the first and last line of a payload from the
# 'BL_PLD_BEGIN' and 'BL_PLD_END' arrays.
#
function bl_pld_extract_raw
{
   local payload_no=$1
   local file_target=$2
   local file_source=$3

   if $(bl_str_is_empty $file_source); then
      file_source=$BL_FS_MYSELF_DIR/$BL_FS_MYSELF_NAME
   fi

   bl_log_d "sed -n \"${BL_PLD_BEGIN[$payload_no]},${BL_PLD_END[$payload_no]}p\""

   sed -n "${BL_PLD_BEGIN[$payload_no]},${BL_PLD_END[$payload_no]}p" \
$file_source >> $file_target
}

function bl_pld_extract_envsubst
{
   local payload_no=$1
   local file_target=$2
   local file_source=$3

   local file_intermediate=$(bl_fs_new_tempfile)

   bl_pld_extract_raw $payload_no $file_intermediate $file_source

   which envsubst 1>/dev/null 2>&1
   local rc=$?

   if [ $rc -eq 0 ]; then
      envsubst < $file_intermediate > $file_target
      rm $file_intermediate
   else
      bl_log_e "unresolved dependency or not in path: envsubst"
      mv $file_intermediate $file_target
   fi
}

alias bl_pld_extract='bl_pld_extract_raw'

### RUN ########################################################################

#TODO how to handle optional dependencies... (see bl_pld_extract_envsubst)
#bl_dep_check_pgm envsubst

bl_dep_check_pgm sed
bl_dep_check_pgm wc
bl_dep_check_pgm cat
bl_dep_check_pgm grep

bl_pld_find
